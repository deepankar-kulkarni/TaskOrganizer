@model TaskOrganizer.Models.Task

@{
    ViewBag.Title = "CreateTask";
    Layout = "~/Views/Shared/_Layout.cshtml";

    List<SelectListItem> statusList = new List<SelectListItem>();
    statusList.Add(new SelectListItem
    {
        Text = "Completed",
        Value = "Completed"
    });
    statusList.Add(new SelectListItem
    {
        Text = "In Progress",
        Value = "InProgress",
        Selected = true
    });
    statusList.Add(new SelectListItem
    {
        Text = "Pending",
        Value = "Pending"
    });
    statusList.Add(new SelectListItem
    {
        Text = "On Hold",
        Value = "OnHold"
    });
    statusList.Add(new SelectListItem
    {
        Text = "Not Started",
        Value = "NotStarted"
    });
}
<link href="~/Content/Site.css" rel="stylesheet" />
<div class="header-outer">
    <div class="left">
        <label>Create Task</label>
    </div>
    <div class="right">
        <button class="btn btn-primary add-task" onclick="location.href='@Url.Action("GetUserWiseTask", "UserMvc",new { username = User.Identity.Name })'"><i class="fas fa-arrow-left"></i>Back</button>
    </div>
</div>
@using (Html.BeginForm("CreateTask", "UserMvc", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <div class="wrap">
        <div class="form-horizontal main">
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.TaskId)

            <div class="form-group">
                @Html.LabelFor(model => model.Assignee, "Assignee", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownList("Assignee", (IEnumerable<SelectListItem>)ViewBag.AssigneeList, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Assignee, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.TaskName, "Task Name", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.TaskName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.TaskName, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.TaskDescription, "Task Description", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextAreaFor(model => model.TaskDescription, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.TaskDescription, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.DueDate, "Due Date", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextBoxFor(model => model.DueDate, "{0:yyyy-MM-dd}", new { @class = "form-control", @type = "date" })
                    @Html.ValidationMessageFor(model => model.DueDate, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Priority, "Priority", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EnumDropDownListFor(model => model.Prioritytext, new { @class = "form-control " })
                    @Html.ValidationMessageFor(model => model.Priority, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Stage, "Stage", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div>
                        @Html.DropDownList("Stage", statusList, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Stage, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" class="btn btn-primary" />
                </div>
            </div>
        </div>
    </div>
   
}
